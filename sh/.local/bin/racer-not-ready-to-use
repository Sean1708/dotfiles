#!/usr/bin/env bash

set -euo pipefail

error() {
    source "$HOME/.config/sh/utils/error"
}

# Set a default for RUSTUP_HOME
rustup_home="${RUSTUP_HOME:-"${HOME}/.multirust"}"
rust_source_root="${RUST_SOURCE_ROOT:-"${rustup_home}/src"}"

[[ -d "$rust_source_root" ]] || mkdir -p "$rust_source_root"

# TODO: Check that this works with false and true instead of 0 and 1
self_found=$(false)
# TODO: This doesn't deal well with path entries that contain spaces
for cmd in $(which -a "$(basename "$0")")
do
  if [[ "$self_found" -eq $(true) ]]
  then
    next_racer="$cmd"
  elif [[ "${cmd}" -ef "$0" ]]
  then
    self_found=$(true)
  fi
done

if [[ "$self_found" -eq $(false) ]]
then
  next_racer="${next_racer:-racer}"
fi

function vivify() {
    local git_hash="$1"

    export RUSTUP_GIT_DIR="$RUSTUP_HOME/src/git"
    if ! [[ -d "${GIT_DIR}" ]]
    then
      git clone --bare --quiet https://github.com/rust-lang/rust "$RUSTUP_GIT_DIR"
    fi

    if (( $(date +%s) - 3600*12 > $(stat -c %Y "${RUSTUP_GIT_DIR}") ))
    then
      git fetch --all
    fi

    local git_tree
    git_tree="$(git rev-parse --verify --quiet "${git_hash}^{tree}")"
    if [[ $? -ne 0 ]]
    then
      error "unable to resolve ${git_hash}" 1
    fi

    if ! [[ -d "${rust_source_root}/rust-${git_tree}" ]]; then
      git archive --prefix=rust-"${git_tree}/" "$git_hash" | tar xC "$rust_source_root"
    fi

    readlink -f "${rust_source_root}/rust-${TREE}"
}

function rust_version() {
    # Get the current rust compiler version
    local rust_commit
    rust_commit="$(rustc -vV 2>/dev/null | awk '($1 == "commit-hash:") { print $2 }')"
    if [[ $? -ne 0 ]]
    then
	error "rust isn't installed!" 2
    fi

    echo "$rust_commit"
}

exec env RUST_SRC_PATH="$(vivify "$(rust_version)")/src" "${next_racer}" "$@"
