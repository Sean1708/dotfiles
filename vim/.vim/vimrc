" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible


" PLUGINS {{{1
" VUNDLE {{{2

" required for vundle
filetype off

" add vundle to the runtime path and initialise it
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" use vundle on vundle
Plugin 'gmarik/Vundle.vim'

" VUNDLE PACKAGES
Plugin 'klen/python-mode'
Plugin 'JuliaLang/julia-vim'
Plugin 'vim-scripts/repmo.vim'
Plugin 'haya14busa/incsearch.vim'
Plugin 'chrisbra/csv.vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'ajh17/Spacegray.vim'


" finish initialisation
call vundle#end()


"" VUNDLE HELP
"   :PluginList          - list configured plugins
"   :PluginInstall(!)    - install (update) plugins
"   :PluginSearch(!) foo - search (or refresh cache first) for foo
"   :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
"  
"   see :h vundle for more details or wiki for FAQ

" }}}2 END VUNDLE
" PYTHON-MODE {{{2

" start with all folds open
" see if this can be done with python-mode options
set foldlevelstart=99

" don't use rope
let g:pymode_rope = 0
" use custom set of linters
let g:pymode_lint_checkers = ['pep8', 'pep257', 'pylint', 'pyflakes']
" ensure print is highlighted as a function
let g:pymode_syntax_print_as_function = 1
" remove annoying column
let g:pymode_options_colorcolumn = 0

" }}}2 END PYTHON-MODE
" INCSEARCH.VIM {{{2
" incrementally search whole page
map / <Plug>(incsearch-forward)
map ? <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" turn off highlighting when non-search related key is pressed
let g:incsearch#auto_nohlsearch = 1
map n <Plug>(incsearch-nohl-n)
map N <Plug>(incsearch-nohl-N)
map * <Plug>(incsearch-nohl-*)
map # <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" n always forward and N always backward
let g:incsearch#consistent_n_direction = 1

" automatically set magic with no portability problems
let g:incsearch#magic = '\v'
" }}}2 END INCSEARCH.VIM
" }}}1 END PLUGINS
" GENERAL {{{1
" enable file type detection
filetype plugin indent on

" don't save backup files and set directory for .swp files
set nobackup
set directory=~/.vim/backup/

" save files automatically
set autowrite

" keep 50 lines of command line history
set history=50
" }}}1 END GENERAL
" MAPPINGS {{{1
" remap leader to a nicer button
let mapleader = " "
" set a personal leader
let maplocalleader = "\\"

" quickly edit a new file
nnoremap <localleader>e :argedit 
" quickly move between args
nnoremap <localleader>n :next<CR>
nnoremap <localleader>p :previous<CR>

" ' is more convenient than , and has redundancy with `
nnoremap ' ,

" make moving back into normal mode quicker
inoremap jk <ESC>
vnoremap jk <ESC>

" Y follows standards of other capitals
nnoremap Y y$

" quicker bracket finding
noremap <Tab> %

" set up and down to move the entire screen one line
nnoremap <Up> <C-Y>
nnoremap <Down> <C-E>

" set left and right to move the entire screen half a page
nnoremap <Right> <C-D>
nnoremap <Left> <C-U>

" }}}1 END MAPPINGS
" EDITING {{{1
" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" nav keys move to previous and successive lines
set whichwrap=h,l

" don't use 2 spaces at end of sentence
set nojoinspaces

" timeout more quckly on incomplete sequences
set timeout
set timeoutlen=500
" }}}1 END EDITING
" SEARCHING {{{1
" ignore case in searches unless a capital letter is used
set ignorecase
set smartcase

" apply substitutions globally on line by default
set gdefault
" }}}1 END SEARCHING
" VISUAL {{{1
" 256-bit colors
set t_Co=256
colorscheme solarized

" highlight current line
set cursorline

" syntax highlighting
syntax on

" show line number on current line and relative line numbers on all others
set number
set relativenumber

" show the cursor position all the time in status bar
set ruler

" display incomplete commands
set showcmd

" force linebreaks at column 80
set textwidth=80

" don't wrap text
set nowrap

" set tabs to 4 spaces and expand them
set tabstop=4  " number of columns <Tab> counts as in normal mode
set shiftwidth=4  " columns added/removed when changing indent level
set softtabstop=4  " amount of whitespace corresponding to tab presses
set expandtab
" }}}1 END VISUAL


" vim: foldmethod=marker foldlevel=0
